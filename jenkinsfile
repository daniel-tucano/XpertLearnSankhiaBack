pipeline {
    agent any
    stages {
        stage('Constroi a imagem da apĺicação no docker') {
            steps {
                wrap([$class: 'CacheWrapper', maxCacheSize: 250, caches: [
                    [$class: 'ArbitraryFileCache', excludes: '', includes: '**/*', path: './node_modules/.cache']
                ]]) {
                    script {
                        def app = docker.build('daanrsantiago/xpertsankhia-backend', '-f Dockerfile .')
                    }
                }
            }
        }

        // stage('Constroi a imagem de teste da aplicação no docker') {
        //     steps {
        //         script {
        //             def app = docker.build('daanrsantiago/xpertsankhia-backend-test', '-f Dockerfile.test .')
        //         }
        //     }
        // }

        // stage('Realiza os teste unitários') {
        //     // Idealmente aqui seriam realizados testes, mas este respositório não esta usando
        //     // nenhum framework de testes atualmente, então apenas utilizaremos um echo 'testes passaram com sucesso'
        //     steps {
        //         script {
        //             sh 'docker run --rm daanrsantiago/xpertsankhia-backend-test'
        //         }
        //     }
        // }

        stage('Da um Push na imagem para o Docker Hub') {
            steps {
                script {
                    def app = docker.image('daanrsantiago/xpertsankhia-backend')
                    docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
                        app.push("${env.BUILD_NUMBER}")
                        app.push('latest')
                    }
                }
            }
        }

        stage('Atualiza pods na kubernetes') {
            steps {
                sh "kubectl set image deployments/xpertsankhia-backend  xpertsankhia-backend-container=daanrsantiago/xpertsankhia-backend:${env.BUILD_NUMBER}"
            }
        }
    }
}
